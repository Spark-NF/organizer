name: Build

on:
  push:
    paths-ignore:
    - 'docs/**'
    - '**.md'
  pull_request:
    paths-ignore:
    - 'docs/**'
    - '**.md'

env:
  QT_VERSION: 6.9.1
  QT_MODULES: qtmultimedia qtimageformats
  IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}
  IS_NIGHTLY: ${{ !startsWith(github.ref, 'refs/tags/v') }}

jobs:
  version:
    name: Version
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get-version.outputs.version }}
      release: ${{ steps.get-version.outputs.release }}

    steps:
      - name: Get version
        id: get-version
        run: |
          if [[ "$IS_RELEASE" == 'true' ]]; then echo "version=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT ; fi
          if [[ "$IS_RELEASE" != 'true' ]]; then echo "version=nightly" >> $GITHUB_OUTPUT ; fi
          echo "release=${IS_RELEASE}" >> $GITHUB_OUTPUT

  coverage:
    name: Code coverage
    runs-on: ubuntu-22.04

    env:
      COVERAGE: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install lcov
          sudo apt install libxkbcommon-x11-0 libfuse2 libpulse-dev libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-cursor0 libgstreamer-plugins-base1.0-0 zsync

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          cache: true
          version: ${{ env.QT_VERSION }}
          modules: ${{ env.QT_MODULES }}

      - name: Build
        run: |
          mkdir build
          cd build
          cmake ../src -DCMAKE_BUILD_TYPE=Debug -DVERSION="9.9.9"
          cmake --build . --config Debug --parallel

      - name: Test
        working-directory: build
        env:
          QT_QPA_PLATFORM: offscreen
        run: |
          lib/lib-tests
          cli/cli-tests
          gui/gui-tests
          drop/drop-tests

      - name: Capture coverage info
        run: |
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          lcov --list coverage.info

      - name: Upload coverage results
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  linux:
    name: Linux
    runs-on: ubuntu-22.04
    needs: version

    env:
      ORGANIZER_VERSION: ${{ needs.version.outputs.version }}
      LINUXDEPLOYQT_VERSION: continuous

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install libxkbcommon-x11-0 libfuse2 libpulse-dev libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-cursor0 libgstreamer-plugins-base1.0-0 zsync

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          cache: true
          version: ${{ env.QT_VERSION }}
          modules: ${{ env.QT_MODULES }}

      - name: Build
        run: |
          mkdir build
          cd build
          cmake ../src -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DVERSION="$ORGANIZER_VERSION"
          cmake --build . --config Release --parallel
          make DESTDIR=../install/Organizer install

      - name: Test
        working-directory: build
        env:
          QT_QPA_PLATFORM: offscreen
        run: |
          lib/lib-tests
          cli/cli-tests
          gui/gui-tests
          drop/drop-tests

      - name: Generate AppImage
        run: |
          curl -Lo "linuxdeployqt.AppImage" "https://github.com/probonopd/linuxdeployqt/releases/download/${LINUXDEPLOYQT_VERSION}/linuxdeployqt-${LINUXDEPLOYQT_VERSION}-x86_64.AppImage"
          chmod a+x linuxdeployqt.AppImage
          ./linuxdeployqt.AppImage "install/Organizer/usr/share/applications/organizer.desktop" -appimage -updateinformation="gh-releases-zsync|Spark-NF|organizer|latest|Organizer_*-x86_64.AppImage.zsync"

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: Organizer-x86_64.AppImage
          path: Organizer-x86_64.AppImage
          if-no-files-found: error

      - name: Upload package update information
        uses: actions/upload-artifact@v4
        with:
          name: Organizer-x86_64.AppImage.zsync
          path: Organizer-x86_64.AppImage.zsync
          if-no-files-found: error

  macos:
    name: macOS
    runs-on: macos-latest
    needs: version

    env:
      ORGANIZER_VERSION: ${{ needs.version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          cache: true
          version: ${{ env.QT_VERSION }}
          modules: ${{ env.QT_MODULES }}

      - name: Build
        run: |
          mkdir build
          cd build
          cmake ../src -DCMAKE_BUILD_TYPE=Release -DVERSION="$ORGANIZER_VERSION"
          cmake --build . --config Release --parallel

      - name: Test
        working-directory: build
        env:
          QT_QPA_PLATFORM: offscreen
        run: |
          lib/lib-tests
          cli/cli-tests
          gui/gui-tests
          drop/drop-tests

      - name: Generate DMG
        run: |
          macdeployqt build/gui/Organizer.app -dmg
          mv build/gui/Organizer.dmg .

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: Organizer.dmg
          path: Organizer.dmg
          if-no-files-found: error

  windows:
    name: Windows
    runs-on: windows-2022
    needs: version

    env:
      ORGANIZER_VERSION: ${{ needs.version.outputs.version }}

    steps:
      - name: Set environment
        shell: bash
        run: echo "BUILD_TYPE=$([ "IS_NIGHTLY" = "1" ] && echo "Release" || echo "RelWithDebInfo")" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          cache: true
          version: ${{ env.QT_VERSION }}
          modules: ${{ env.QT_MODULES }}

      - name: Build
        shell: cmd
        run: |
          mkdir build
          cd build
          cmake ../src -G "Visual Studio 17 2022" -A "x64" -DCMAKE_BUILD_TYPE=%BUILD_TYPE% -DVERSION=%ORGANIZER_VERSION%
          cmake --build . --config %BUILD_TYPE% --parallel

      - name: Test
        shell: cmd
        working-directory: build
        env:
          QT_QPA_PLATFORM: offscreen
        run: |
          lib\%BUILD_TYPE%\lib-tests.exe
          cli\%BUILD_TYPE%\cli-tests.exe
          gui\%BUILD_TYPE%\gui-tests.exe
          drop\%BUILD_TYPE%\drop-tests.exe

      - name: Move build files
        shell: cmd
        working-directory: build
        run: |
          mv gui/%BUILD_TYPE%/Organizer.exe .
          mv cli/%BUILD_TYPE%/Organizer-cli.exe .
          mv drop/%BUILD_TYPE%/Organizer-drop.exe .
          if "%IS_RELEASE%"=="true" (mv gui/%BUILD_TYPE%/Organizer.pdb .)
          if "%IS_RELEASE%"=="true" (mv cli/%BUILD_TYPE%/Organizer-cli.pdb .)
          if "%IS_RELEASE%"=="true" (mv drop/%BUILD_TYPE%/Organizer-drop.pdb .)

      - name: Generate installer
        run: |
          iscc /Q /DMyAppVersion="$Env:ORGANIZER_VERSION" /DPlatformName="x64" /DQtDir="$Env:QT_ROOT_DIR" setup/setup.iss
          mv setup/*.exe Organizer_x64.exe

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: Organizer_x64.exe
          path: Organizer_x64.exe
          if-no-files-found: error

      - name: Generate symbols ZIP
        if: ${{ github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/v') }}
        run: 7z a "Organizer_x64_symbols.zip" "build/Organizer.pdb" "build/Organizer-cli.pdb" "build/Organizer-drop.pdb"

      - name: Upload symbols
        uses: actions/upload-artifact@v4
        if: ${{ github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/v') }}
        with:
          name: Organizer_x64_symbols.zip
          path: Organizer_x64_symbols.zip
          if-no-files-found: error

  github:
    name: Upload to GitHub releases
    runs-on: ubuntu-latest
    needs: [version, linux, macos, windows]

    if: github.repository == 'Spark-NF/Organizer' && github.event_name == 'push' && (needs.version.outputs.release == 'true' || github.ref == 'refs/heads/master')

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VERSION: ${{ needs.version.outputs.version }}

    steps:
      - name: Download artifact (Linux)
        uses: actions/download-artifact@v5
        with:
          name: Organizer-x86_64.AppImage

      - name: Download artifact (Linux update information)
        uses: actions/download-artifact@v5
        with:
          name: Organizer-x86_64.AppImage.zsync

      - name: Download artifact (macOS)
        uses: actions/download-artifact@v5
        with:
          name: Organizer.dmg

      - name: Download artifact (Windows)
        uses: actions/download-artifact@v5
        with:
          name: Organizer_x64.exe

      - name: Download artifact (Windows symbols)
        uses: actions/download-artifact@v5
        if: needs.version.outputs.release == 'true'
        with:
          name: Organizer_x64_symbols.zip

      - name: Rename artifacts
        run: |
          mv Organizer-x86_64.AppImage Organizer_${VERSION}-x86_64.AppImage
          mv Organizer-x86_64.AppImage.zsync Organizer_${VERSION}-x86_64.AppImage.zsync
          mv Organizer.dmg Organizer_${VERSION}.dmg
          mv Organizer_x64.exe Organizer_${VERSION}_x64.exe

      - name: Rename symbols artifacts
        if: needs.version.outputs.release == 'true'
        run: |
          mv Organizer_x64_symbols.zip Organizer_${VERSION}_x64_symbols.zip

      - name: Get date for Nightly body
        id: date
        if: needs.version.outputs.release == 'false'
        run: echo "date=$(date +'%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_OUTPUT

      - name: Nightly
        uses: ncipollo/release-action@v1
        if: needs.version.outputs.release == 'false'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: nightly
          name: Nightly
          allowUpdates: true
          draft: false
          prerelease: true
          artifacts: Organizer_*
          body: |
            Nightly automated builds from the master branch.
            Automatically uploaded by Github actions, **use at your own risk**!

            **Head:** ${{ github.sha }}
            **Date:** ${{ steps.date.outputs.date }}

      - name: Release
        uses: ncipollo/release-action@v1
        if: needs.version.outputs.release == 'true'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          draft: true
          artifacts: Organizer_*